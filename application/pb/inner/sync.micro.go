// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: application/pb/inner/sync.proto

/*
Package xbasissvc_internal_application is a generated protocol buffer package.

It is generated from these files:
	application/pb/inner/sync.proto

It has these top-level messages:
	CheckRequest
	UserInfo
*/
package xbasissvc_internal_application

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import xbasis_commons_dto "konekko.me/xbasis/commons/dto"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = xbasis_commons_dto.Status{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserSync service

type UserSyncService interface {
	Check(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*xbasis_commons_dto.Status, error)
	Update(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*xbasis_commons_dto.Status, error)
}

type userSyncService struct {
	c    client.Client
	name string
}

func NewUserSyncService(name string, c client.Client) UserSyncService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "xbasissvc.internal.application"
	}
	return &userSyncService{
		c:    c,
		name: name,
	}
}

func (c *userSyncService) Check(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*xbasis_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "UserSync.Check", in)
	out := new(xbasis_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSyncService) Update(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*xbasis_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "UserSync.Update", in)
	out := new(xbasis_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserSync service

type UserSyncHandler interface {
	Check(context.Context, *CheckRequest, *xbasis_commons_dto.Status) error
	Update(context.Context, *UserInfo, *xbasis_commons_dto.Status) error
}

func RegisterUserSyncHandler(s server.Server, hdlr UserSyncHandler, opts ...server.HandlerOption) error {
	type userSync interface {
		Check(ctx context.Context, in *CheckRequest, out *xbasis_commons_dto.Status) error
		Update(ctx context.Context, in *UserInfo, out *xbasis_commons_dto.Status) error
	}
	type UserSync struct {
		userSync
	}
	h := &userSyncHandler{hdlr}
	return s.Handle(s.NewHandler(&UserSync{h}, opts...))
}

type userSyncHandler struct {
	UserSyncHandler
}

func (h *userSyncHandler) Check(ctx context.Context, in *CheckRequest, out *xbasis_commons_dto.Status) error {
	return h.UserSyncHandler.Check(ctx, in, out)
}

func (h *userSyncHandler) Update(ctx context.Context, in *UserInfo, out *xbasis_commons_dto.Status) error {
	return h.UserSyncHandler.Update(ctx, in, out)
}
