// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: application/pb/inner/status.proto

/*
Package xbasissvc_internal_application is a generated protocol buffer package.

It is generated from these files:
	application/pb/inner/status.proto

It has these top-level messages:
	GetAppClientStatusRequest
	GetAppClientStatusResponse
*/
package xbasissvc_internal_application

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "konekko.me/xbasis/commons/dto"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ApplicationStatus service

type ApplicationStatusService interface {
	GetAppClientStatus(ctx context.Context, in *GetAppClientStatusRequest, opts ...client.CallOption) (*GetAppClientStatusResponse, error)
}

type applicationStatusService struct {
	c    client.Client
	name string
}

func NewApplicationStatusService(name string, c client.Client) ApplicationStatusService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "xbasissvc.internal.application"
	}
	return &applicationStatusService{
		c:    c,
		name: name,
	}
}

func (c *applicationStatusService) GetAppClientStatus(ctx context.Context, in *GetAppClientStatusRequest, opts ...client.CallOption) (*GetAppClientStatusResponse, error) {
	req := c.c.NewRequest(c.name, "ApplicationStatus.GetAppClientStatus", in)
	out := new(GetAppClientStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApplicationStatus service

type ApplicationStatusHandler interface {
	GetAppClientStatus(context.Context, *GetAppClientStatusRequest, *GetAppClientStatusResponse) error
}

func RegisterApplicationStatusHandler(s server.Server, hdlr ApplicationStatusHandler, opts ...server.HandlerOption) error {
	type applicationStatus interface {
		GetAppClientStatus(ctx context.Context, in *GetAppClientStatusRequest, out *GetAppClientStatusResponse) error
	}
	type ApplicationStatus struct {
		applicationStatus
	}
	h := &applicationStatusHandler{hdlr}
	return s.Handle(s.NewHandler(&ApplicationStatus{h}, opts...))
}

type applicationStatusHandler struct {
	ApplicationStatusHandler
}

func (h *applicationStatusHandler) GetAppClientStatus(ctx context.Context, in *GetAppClientStatusRequest, out *GetAppClientStatusResponse) error {
	return h.ApplicationStatusHandler.GetAppClientStatus(ctx, in, out)
}
