// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: safety/pb/frozen.proto

/*
Package gs_service_safety is a generated protocol buffer package.

It is generated from these files:
	safety/pb/frozen.proto

It has these top-level messages:
	FrozenRequest
	UnblockRequest
*/
package gs_service_safety

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import gs_commons_dto "konekko.me/gosion/commons/dto"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = gs_commons_dto.Status{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Frozen service

type FrozenService interface {
	Request(ctx context.Context, in *FrozenRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	Unblock(ctx context.Context, in *UnblockRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error)
}

type frozenService struct {
	c    client.Client
	name string
}

func NewFrozenService(name string, c client.Client) FrozenService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "gs.service.safety"
	}
	return &frozenService{
		c:    c,
		name: name,
	}
}

func (c *frozenService) Request(ctx context.Context, in *FrozenRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Frozen.Request", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frozenService) Unblock(ctx context.Context, in *UnblockRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Frozen.Unblock", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Frozen service

type FrozenHandler interface {
	Request(context.Context, *FrozenRequest, *gs_commons_dto.Status) error
	Unblock(context.Context, *UnblockRequest, *gs_commons_dto.Status) error
}

func RegisterFrozenHandler(s server.Server, hdlr FrozenHandler, opts ...server.HandlerOption) error {
	type frozen interface {
		Request(ctx context.Context, in *FrozenRequest, out *gs_commons_dto.Status) error
		Unblock(ctx context.Context, in *UnblockRequest, out *gs_commons_dto.Status) error
	}
	type Frozen struct {
		frozen
	}
	h := &frozenHandler{hdlr}
	return s.Handle(s.NewHandler(&Frozen{h}, opts...))
}

type frozenHandler struct {
	FrozenHandler
}

func (h *frozenHandler) Request(ctx context.Context, in *FrozenRequest, out *gs_commons_dto.Status) error {
	return h.FrozenHandler.Request(ctx, in, out)
}

func (h *frozenHandler) Unblock(ctx context.Context, in *UnblockRequest, out *gs_commons_dto.Status) error {
	return h.FrozenHandler.Unblock(ctx, in, out)
}
