// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pb/process.proto

/*
Package xbasissvc_external_workflow is a generated protocol buffer package.

It is generated from these files:
	pb/process.proto

It has these top-level messages:
	SearchProcessRequest
	SearchProcessResponse
	SearchProcessItem
	DetailRequest
	DetailResponse
	GetImageRequest
	GetImageResponse
	CreateRequest
	CreateResponse
	BuildRequest
	BuildResponse
	DeleteRequest
	DeleteResponse
	UpdateRequest
	UpdateResponse
	OpenRequest
	OpenResponse
	LaunchRequest
	LaunchResponse
*/
package xbasissvc_external_workflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "konekko.me/xbasis/commons/dto"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Process service

type ProcessService interface {
	// 启动一个流程
	Launch(ctx context.Context, in *LaunchRequest, opts ...client.CallOption) (*LaunchResponse, error)
	// 构建
	Build(ctx context.Context, in *BuildRequest, opts ...client.CallOption) (*BuildResponse, error)
	// 删除
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	// 更新
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	// 开启生产
	Open(ctx context.Context, in *OpenRequest, opts ...client.CallOption) (*OpenResponse, error)
	// 详情
	Detail(ctx context.Context, in *DetailRequest, opts ...client.CallOption) (*DetailResponse, error)
	// 获取流程图
	GetImage(ctx context.Context, in *GetImageRequest, opts ...client.CallOption) (*GetImageResponse, error)
	Search(ctx context.Context, in *SearchProcessRequest, opts ...client.CallOption) (*SearchProcessResponse, error)
}

type processService struct {
	c    client.Client
	name string
}

func NewProcessService(name string, c client.Client) ProcessService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "xbasissvc.external.workflow"
	}
	return &processService{
		c:    c,
		name: name,
	}
}

func (c *processService) Launch(ctx context.Context, in *LaunchRequest, opts ...client.CallOption) (*LaunchResponse, error) {
	req := c.c.NewRequest(c.name, "Process.Launch", in)
	out := new(LaunchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processService) Build(ctx context.Context, in *BuildRequest, opts ...client.CallOption) (*BuildResponse, error) {
	req := c.c.NewRequest(c.name, "Process.Build", in)
	out := new(BuildResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "Process.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processService) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.name, "Process.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processService) Open(ctx context.Context, in *OpenRequest, opts ...client.CallOption) (*OpenResponse, error) {
	req := c.c.NewRequest(c.name, "Process.Open", in)
	out := new(OpenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processService) Detail(ctx context.Context, in *DetailRequest, opts ...client.CallOption) (*DetailResponse, error) {
	req := c.c.NewRequest(c.name, "Process.Detail", in)
	out := new(DetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processService) GetImage(ctx context.Context, in *GetImageRequest, opts ...client.CallOption) (*GetImageResponse, error) {
	req := c.c.NewRequest(c.name, "Process.GetImage", in)
	out := new(GetImageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processService) Search(ctx context.Context, in *SearchProcessRequest, opts ...client.CallOption) (*SearchProcessResponse, error) {
	req := c.c.NewRequest(c.name, "Process.Search", in)
	out := new(SearchProcessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Process service

type ProcessHandler interface {
	// 启动一个流程
	Launch(context.Context, *LaunchRequest, *LaunchResponse) error
	// 构建
	Build(context.Context, *BuildRequest, *BuildResponse) error
	// 删除
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	// 更新
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	// 开启生产
	Open(context.Context, *OpenRequest, *OpenResponse) error
	// 详情
	Detail(context.Context, *DetailRequest, *DetailResponse) error
	// 获取流程图
	GetImage(context.Context, *GetImageRequest, *GetImageResponse) error
	Search(context.Context, *SearchProcessRequest, *SearchProcessResponse) error
}

func RegisterProcessHandler(s server.Server, hdlr ProcessHandler, opts ...server.HandlerOption) error {
	type process interface {
		Launch(ctx context.Context, in *LaunchRequest, out *LaunchResponse) error
		Build(ctx context.Context, in *BuildRequest, out *BuildResponse) error
		Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
		Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error
		Open(ctx context.Context, in *OpenRequest, out *OpenResponse) error
		Detail(ctx context.Context, in *DetailRequest, out *DetailResponse) error
		GetImage(ctx context.Context, in *GetImageRequest, out *GetImageResponse) error
		Search(ctx context.Context, in *SearchProcessRequest, out *SearchProcessResponse) error
	}
	type Process struct {
		process
	}
	h := &processHandler{hdlr}
	return s.Handle(s.NewHandler(&Process{h}, opts...))
}

type processHandler struct {
	ProcessHandler
}

func (h *processHandler) Launch(ctx context.Context, in *LaunchRequest, out *LaunchResponse) error {
	return h.ProcessHandler.Launch(ctx, in, out)
}

func (h *processHandler) Build(ctx context.Context, in *BuildRequest, out *BuildResponse) error {
	return h.ProcessHandler.Build(ctx, in, out)
}

func (h *processHandler) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.ProcessHandler.Delete(ctx, in, out)
}

func (h *processHandler) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.ProcessHandler.Update(ctx, in, out)
}

func (h *processHandler) Open(ctx context.Context, in *OpenRequest, out *OpenResponse) error {
	return h.ProcessHandler.Open(ctx, in, out)
}

func (h *processHandler) Detail(ctx context.Context, in *DetailRequest, out *DetailResponse) error {
	return h.ProcessHandler.Detail(ctx, in, out)
}

func (h *processHandler) GetImage(ctx context.Context, in *GetImageRequest, out *GetImageResponse) error {
	return h.ProcessHandler.GetImage(ctx, in, out)
}

func (h *processHandler) Search(ctx context.Context, in *SearchProcessRequest, out *SearchProcessResponse) error {
	return h.ProcessHandler.Search(ctx, in, out)
}
