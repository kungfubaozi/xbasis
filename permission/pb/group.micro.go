// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: permission/pb/group.proto

/*
Package gs_service_permission is a generated protocol buffer package.

It is generated from these files:
	permission/pb/group.proto

It has these top-level messages:
	SimpleGroup
	SimpleUserNode
*/
package gs_service_permission

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import gs_commons_dto "konekko.me/gosion/commons/dto"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = gs_commons_dto.Status{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for GroupStructure service

type GroupStructureService interface {
	LinkTo(ctx context.Context, in *SimpleGroup, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	Unlink(ctx context.Context, in *SimpleGroup, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	Add(ctx context.Context, in *SimpleGroup, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	Remove(ctx context.Context, in *SimpleGroup, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	Rename(ctx context.Context, in *SimpleGroup, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	AddUserToGroup(ctx context.Context, in *SimpleUserNode, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	MoveUserToGroup(ctx context.Context, in *SimpleUserNode, opts ...client.CallOption) (*gs_commons_dto.Status, error)
}

type groupStructureService struct {
	c    client.Client
	name string
}

func NewGroupStructureService(name string, c client.Client) GroupStructureService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "gs.service.permission"
	}
	return &groupStructureService{
		c:    c,
		name: name,
	}
}

func (c *groupStructureService) LinkTo(ctx context.Context, in *SimpleGroup, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "GroupStructure.linkTo", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupStructureService) Unlink(ctx context.Context, in *SimpleGroup, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "GroupStructure.unlink", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupStructureService) Add(ctx context.Context, in *SimpleGroup, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "GroupStructure.add", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupStructureService) Remove(ctx context.Context, in *SimpleGroup, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "GroupStructure.remove", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupStructureService) Rename(ctx context.Context, in *SimpleGroup, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "GroupStructure.rename", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupStructureService) AddUserToGroup(ctx context.Context, in *SimpleUserNode, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "GroupStructure.addUserToGroup", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupStructureService) MoveUserToGroup(ctx context.Context, in *SimpleUserNode, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "GroupStructure.moveUserToGroup", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GroupStructure service

type GroupStructureHandler interface {
	LinkTo(context.Context, *SimpleGroup, *gs_commons_dto.Status) error
	Unlink(context.Context, *SimpleGroup, *gs_commons_dto.Status) error
	Add(context.Context, *SimpleGroup, *gs_commons_dto.Status) error
	Remove(context.Context, *SimpleGroup, *gs_commons_dto.Status) error
	Rename(context.Context, *SimpleGroup, *gs_commons_dto.Status) error
	AddUserToGroup(context.Context, *SimpleUserNode, *gs_commons_dto.Status) error
	MoveUserToGroup(context.Context, *SimpleUserNode, *gs_commons_dto.Status) error
}

func RegisterGroupStructureHandler(s server.Server, hdlr GroupStructureHandler, opts ...server.HandlerOption) error {
	type groupStructure interface {
		LinkTo(ctx context.Context, in *SimpleGroup, out *gs_commons_dto.Status) error
		Unlink(ctx context.Context, in *SimpleGroup, out *gs_commons_dto.Status) error
		Add(ctx context.Context, in *SimpleGroup, out *gs_commons_dto.Status) error
		Remove(ctx context.Context, in *SimpleGroup, out *gs_commons_dto.Status) error
		Rename(ctx context.Context, in *SimpleGroup, out *gs_commons_dto.Status) error
		AddUserToGroup(ctx context.Context, in *SimpleUserNode, out *gs_commons_dto.Status) error
		MoveUserToGroup(ctx context.Context, in *SimpleUserNode, out *gs_commons_dto.Status) error
	}
	type GroupStructure struct {
		groupStructure
	}
	h := &groupStructureHandler{hdlr}
	return s.Handle(s.NewHandler(&GroupStructure{h}, opts...))
}

type groupStructureHandler struct {
	GroupStructureHandler
}

func (h *groupStructureHandler) LinkTo(ctx context.Context, in *SimpleGroup, out *gs_commons_dto.Status) error {
	return h.GroupStructureHandler.LinkTo(ctx, in, out)
}

func (h *groupStructureHandler) Unlink(ctx context.Context, in *SimpleGroup, out *gs_commons_dto.Status) error {
	return h.GroupStructureHandler.Unlink(ctx, in, out)
}

func (h *groupStructureHandler) Add(ctx context.Context, in *SimpleGroup, out *gs_commons_dto.Status) error {
	return h.GroupStructureHandler.Add(ctx, in, out)
}

func (h *groupStructureHandler) Remove(ctx context.Context, in *SimpleGroup, out *gs_commons_dto.Status) error {
	return h.GroupStructureHandler.Remove(ctx, in, out)
}

func (h *groupStructureHandler) Rename(ctx context.Context, in *SimpleGroup, out *gs_commons_dto.Status) error {
	return h.GroupStructureHandler.Rename(ctx, in, out)
}

func (h *groupStructureHandler) AddUserToGroup(ctx context.Context, in *SimpleUserNode, out *gs_commons_dto.Status) error {
	return h.GroupStructureHandler.AddUserToGroup(ctx, in, out)
}

func (h *groupStructureHandler) MoveUserToGroup(ctx context.Context, in *SimpleUserNode, out *gs_commons_dto.Status) error {
	return h.GroupStructureHandler.MoveUserToGroup(ctx, in, out)
}
