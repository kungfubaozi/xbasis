// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: permission/pb/hi.proto

/*
Package gs_service_permission is a generated protocol buffer package.

It is generated from these files:
	permission/pb/hi.proto

It has these top-level messages:
	HiRequest
	HiResponse
*/
package gs_service_permission

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Hi service

type HiService interface {
	SayHello(ctx context.Context, in *HiRequest, opts ...client.CallOption) (*HiResponse, error)
}

type hiService struct {
	c    client.Client
	name string
}

func NewHiService(name string, c client.Client) HiService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "gs.service.permission"
	}
	return &hiService{
		c:    c,
		name: name,
	}
}

func (c *hiService) SayHello(ctx context.Context, in *HiRequest, opts ...client.CallOption) (*HiResponse, error) {
	req := c.c.NewRequest(c.name, "Hi.SayHello", in)
	out := new(HiResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hi service

type HiHandler interface {
	SayHello(context.Context, *HiRequest, *HiResponse) error
}

func RegisterHiHandler(s server.Server, hdlr HiHandler, opts ...server.HandlerOption) error {
	type hi interface {
		SayHello(ctx context.Context, in *HiRequest, out *HiResponse) error
	}
	type Hi struct {
		hi
	}
	h := &hiHandler{hdlr}
	return s.Handle(s.NewHandler(&Hi{h}, opts...))
}

type hiHandler struct {
	HiHandler
}

func (h *hiHandler) SayHello(ctx context.Context, in *HiRequest, out *HiResponse) error {
	return h.HiHandler.SayHello(ctx, in, out)
}
