// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: permission/pb/role.proto

/*
Package xbasissvc_external_permission is a generated protocol buffer package.

It is generated from these files:
	permission/pb/role.proto

It has these top-level messages:
	SearchUserRelationsRequest
	SearchUserRelationsResponse
	UserRelationItem
	SearchFunctionRelationsRequest
	SearchFunctionRelationsResponse
	FunctionRelationItem
	SearchRoleRequest
	SearchRoleResponse
	GetAppRolesRequest
	GetRoleRequest
	GetRoleResponse
	SimpleRoleInfo
	RoleRequest
*/
package xbasissvc_external_permission

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import xbasis_commons_dto "konekko.me/xbasis/commons/dto"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = xbasis_commons_dto.Status{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Role service

type RoleService interface {
	Add(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*xbasis_commons_dto.Status, error)
	Remove(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*xbasis_commons_dto.Status, error)
	Rename(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*xbasis_commons_dto.Status, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...client.CallOption) (*GetRoleResponse, error)
	GetAppRoles(ctx context.Context, in *GetAppRolesRequest, opts ...client.CallOption) (*GetRoleResponse, error)
	SearchRole(ctx context.Context, in *SearchRoleRequest, opts ...client.CallOption) (*SearchRoleResponse, error)
	// 搜索关联的用户
	SearchUserRelations(ctx context.Context, in *SearchUserRelationsRequest, opts ...client.CallOption) (*SearchUserRelationsResponse, error)
	// 搜索关联的功能
	SearchFunctionRelations(ctx context.Context, in *SearchFunctionRelationsRequest, opts ...client.CallOption) (*SearchFunctionRelationsResponse, error)
}

type roleService struct {
	c    client.Client
	name string
}

func NewRoleService(name string, c client.Client) RoleService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "xbasissvc.external.permission"
	}
	return &roleService{
		c:    c,
		name: name,
	}
}

func (c *roleService) Add(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*xbasis_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Role.Add", in)
	out := new(xbasis_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) Remove(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*xbasis_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Role.Remove", in)
	out := new(xbasis_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) Rename(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*xbasis_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Role.Rename", in)
	out := new(xbasis_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) GetRole(ctx context.Context, in *GetRoleRequest, opts ...client.CallOption) (*GetRoleResponse, error) {
	req := c.c.NewRequest(c.name, "Role.GetRole", in)
	out := new(GetRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) GetAppRoles(ctx context.Context, in *GetAppRolesRequest, opts ...client.CallOption) (*GetRoleResponse, error) {
	req := c.c.NewRequest(c.name, "Role.GetAppRoles", in)
	out := new(GetRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) SearchRole(ctx context.Context, in *SearchRoleRequest, opts ...client.CallOption) (*SearchRoleResponse, error) {
	req := c.c.NewRequest(c.name, "Role.SearchRole", in)
	out := new(SearchRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) SearchUserRelations(ctx context.Context, in *SearchUserRelationsRequest, opts ...client.CallOption) (*SearchUserRelationsResponse, error) {
	req := c.c.NewRequest(c.name, "Role.SearchUserRelations", in)
	out := new(SearchUserRelationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) SearchFunctionRelations(ctx context.Context, in *SearchFunctionRelationsRequest, opts ...client.CallOption) (*SearchFunctionRelationsResponse, error) {
	req := c.c.NewRequest(c.name, "Role.SearchFunctionRelations", in)
	out := new(SearchFunctionRelationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Role service

type RoleHandler interface {
	Add(context.Context, *RoleRequest, *xbasis_commons_dto.Status) error
	Remove(context.Context, *RoleRequest, *xbasis_commons_dto.Status) error
	Rename(context.Context, *RoleRequest, *xbasis_commons_dto.Status) error
	GetRole(context.Context, *GetRoleRequest, *GetRoleResponse) error
	GetAppRoles(context.Context, *GetAppRolesRequest, *GetRoleResponse) error
	SearchRole(context.Context, *SearchRoleRequest, *SearchRoleResponse) error
	// 搜索关联的用户
	SearchUserRelations(context.Context, *SearchUserRelationsRequest, *SearchUserRelationsResponse) error
	// 搜索关联的功能
	SearchFunctionRelations(context.Context, *SearchFunctionRelationsRequest, *SearchFunctionRelationsResponse) error
}

func RegisterRoleHandler(s server.Server, hdlr RoleHandler, opts ...server.HandlerOption) error {
	type role interface {
		Add(ctx context.Context, in *RoleRequest, out *xbasis_commons_dto.Status) error
		Remove(ctx context.Context, in *RoleRequest, out *xbasis_commons_dto.Status) error
		Rename(ctx context.Context, in *RoleRequest, out *xbasis_commons_dto.Status) error
		GetRole(ctx context.Context, in *GetRoleRequest, out *GetRoleResponse) error
		GetAppRoles(ctx context.Context, in *GetAppRolesRequest, out *GetRoleResponse) error
		SearchRole(ctx context.Context, in *SearchRoleRequest, out *SearchRoleResponse) error
		SearchUserRelations(ctx context.Context, in *SearchUserRelationsRequest, out *SearchUserRelationsResponse) error
		SearchFunctionRelations(ctx context.Context, in *SearchFunctionRelationsRequest, out *SearchFunctionRelationsResponse) error
	}
	type Role struct {
		role
	}
	h := &roleHandler{hdlr}
	return s.Handle(s.NewHandler(&Role{h}, opts...))
}

type roleHandler struct {
	RoleHandler
}

func (h *roleHandler) Add(ctx context.Context, in *RoleRequest, out *xbasis_commons_dto.Status) error {
	return h.RoleHandler.Add(ctx, in, out)
}

func (h *roleHandler) Remove(ctx context.Context, in *RoleRequest, out *xbasis_commons_dto.Status) error {
	return h.RoleHandler.Remove(ctx, in, out)
}

func (h *roleHandler) Rename(ctx context.Context, in *RoleRequest, out *xbasis_commons_dto.Status) error {
	return h.RoleHandler.Rename(ctx, in, out)
}

func (h *roleHandler) GetRole(ctx context.Context, in *GetRoleRequest, out *GetRoleResponse) error {
	return h.RoleHandler.GetRole(ctx, in, out)
}

func (h *roleHandler) GetAppRoles(ctx context.Context, in *GetAppRolesRequest, out *GetRoleResponse) error {
	return h.RoleHandler.GetAppRoles(ctx, in, out)
}

func (h *roleHandler) SearchRole(ctx context.Context, in *SearchRoleRequest, out *SearchRoleResponse) error {
	return h.RoleHandler.SearchRole(ctx, in, out)
}

func (h *roleHandler) SearchUserRelations(ctx context.Context, in *SearchUserRelationsRequest, out *SearchUserRelationsResponse) error {
	return h.RoleHandler.SearchUserRelations(ctx, in, out)
}

func (h *roleHandler) SearchFunctionRelations(ctx context.Context, in *SearchFunctionRelationsRequest, out *SearchFunctionRelationsResponse) error {
	return h.RoleHandler.SearchFunctionRelations(ctx, in, out)
}
