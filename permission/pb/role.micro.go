// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: permission/pb/role.proto

/*
Package gosionsvc_external_permission is a generated protocol buffer package.

It is generated from these files:
	permission/pb/role.proto

It has these top-level messages:
	EffectUserSizeRequest
	EffectUserSizeResponse
	GetStructureRolesRequest
	GetRoleRequest
	GetRoleResponse
	SimpleRoleInfo
	RoleRequest
*/
package gosionsvc_external_permission

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import gs_commons_dto "konekko.me/gosion/commons/dto"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = gs_commons_dto.Status{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Role service

type RoleService interface {
	Add(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	Remove(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	Rename(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...client.CallOption) (*GetRoleResponse, error)
	GetStructureRoles(ctx context.Context, in *GetStructureRolesRequest, opts ...client.CallOption) (*GetRoleResponse, error)
	EffectUserSize(ctx context.Context, in *EffectUserSizeRequest, opts ...client.CallOption) (*EffectUserSizeResponse, error)
}

type roleService struct {
	c    client.Client
	name string
}

func NewRoleService(name string, c client.Client) RoleService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "gosionsvc.external.permission"
	}
	return &roleService{
		c:    c,
		name: name,
	}
}

func (c *roleService) Add(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Role.Add", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) Remove(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Role.Remove", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) Rename(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Role.Rename", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) GetRole(ctx context.Context, in *GetRoleRequest, opts ...client.CallOption) (*GetRoleResponse, error) {
	req := c.c.NewRequest(c.name, "Role.GetRole", in)
	out := new(GetRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) GetStructureRoles(ctx context.Context, in *GetStructureRolesRequest, opts ...client.CallOption) (*GetRoleResponse, error) {
	req := c.c.NewRequest(c.name, "Role.GetStructureRoles", in)
	out := new(GetRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) EffectUserSize(ctx context.Context, in *EffectUserSizeRequest, opts ...client.CallOption) (*EffectUserSizeResponse, error) {
	req := c.c.NewRequest(c.name, "Role.EffectUserSize", in)
	out := new(EffectUserSizeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Role service

type RoleHandler interface {
	Add(context.Context, *RoleRequest, *gs_commons_dto.Status) error
	Remove(context.Context, *RoleRequest, *gs_commons_dto.Status) error
	Rename(context.Context, *RoleRequest, *gs_commons_dto.Status) error
	GetRole(context.Context, *GetRoleRequest, *GetRoleResponse) error
	GetStructureRoles(context.Context, *GetStructureRolesRequest, *GetRoleResponse) error
	EffectUserSize(context.Context, *EffectUserSizeRequest, *EffectUserSizeResponse) error
}

func RegisterRoleHandler(s server.Server, hdlr RoleHandler, opts ...server.HandlerOption) error {
	type role interface {
		Add(ctx context.Context, in *RoleRequest, out *gs_commons_dto.Status) error
		Remove(ctx context.Context, in *RoleRequest, out *gs_commons_dto.Status) error
		Rename(ctx context.Context, in *RoleRequest, out *gs_commons_dto.Status) error
		GetRole(ctx context.Context, in *GetRoleRequest, out *GetRoleResponse) error
		GetStructureRoles(ctx context.Context, in *GetStructureRolesRequest, out *GetRoleResponse) error
		EffectUserSize(ctx context.Context, in *EffectUserSizeRequest, out *EffectUserSizeResponse) error
	}
	type Role struct {
		role
	}
	h := &roleHandler{hdlr}
	return s.Handle(s.NewHandler(&Role{h}, opts...))
}

type roleHandler struct {
	RoleHandler
}

func (h *roleHandler) Add(ctx context.Context, in *RoleRequest, out *gs_commons_dto.Status) error {
	return h.RoleHandler.Add(ctx, in, out)
}

func (h *roleHandler) Remove(ctx context.Context, in *RoleRequest, out *gs_commons_dto.Status) error {
	return h.RoleHandler.Remove(ctx, in, out)
}

func (h *roleHandler) Rename(ctx context.Context, in *RoleRequest, out *gs_commons_dto.Status) error {
	return h.RoleHandler.Rename(ctx, in, out)
}

func (h *roleHandler) GetRole(ctx context.Context, in *GetRoleRequest, out *GetRoleResponse) error {
	return h.RoleHandler.GetRole(ctx, in, out)
}

func (h *roleHandler) GetStructureRoles(ctx context.Context, in *GetStructureRolesRequest, out *GetRoleResponse) error {
	return h.RoleHandler.GetStructureRoles(ctx, in, out)
}

func (h *roleHandler) EffectUserSize(ctx context.Context, in *EffectUserSizeRequest, out *EffectUserSizeResponse) error {
	return h.RoleHandler.EffectUserSize(ctx, in, out)
}
