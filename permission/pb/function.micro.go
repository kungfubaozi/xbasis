// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: permission/pb/function.proto

/*
Package gosionsvc_external_permission is a generated protocol buffer package.

It is generated from these files:
	permission/pb/function.proto

It has these top-level messages:
	GetFunctionItemsRequest
	GetFunctionItemsResponse
	FindItemResponse
	GetFunctionItemRequest
	GetFunctionItemResponse
	FunctionItemDetail
	FunctionBindRole
	FunctionAuthTypes
	FunctionGrantPlatforms
	FunctionRequest
	FunctionGroupRequest
*/
package gosionsvc_external_permission

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import gs_commons_dto "konekko.me/gosion/commons/dto"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = gs_commons_dto.Status{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Function service

type FunctionService interface {
	Add(ctx context.Context, in *FunctionRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	Rename(ctx context.Context, in *FunctionRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	Move(ctx context.Context, in *FunctionRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	AddGroup(ctx context.Context, in *FunctionGroupRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	MoveGroup(ctx context.Context, in *FunctionGroupRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	RenameGroup(ctx context.Context, in *FunctionGroupRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	GetFunctionItems(ctx context.Context, in *GetFunctionItemsRequest, opts ...client.CallOption) (*GetFunctionItemsResponse, error)
	GetFunctionItemDetail(ctx context.Context, in *GetFunctionItemRequest, opts ...client.CallOption) (*GetFunctionItemResponse, error)
}

type functionService struct {
	c    client.Client
	name string
}

func NewFunctionService(name string, c client.Client) FunctionService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "gosionsvc.external.permission"
	}
	return &functionService{
		c:    c,
		name: name,
	}
}

func (c *functionService) Add(ctx context.Context, in *FunctionRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Function.Add", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionService) Rename(ctx context.Context, in *FunctionRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Function.Rename", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionService) Move(ctx context.Context, in *FunctionRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Function.Move", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionService) AddGroup(ctx context.Context, in *FunctionGroupRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Function.AddGroup", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionService) MoveGroup(ctx context.Context, in *FunctionGroupRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Function.MoveGroup", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionService) RenameGroup(ctx context.Context, in *FunctionGroupRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Function.RenameGroup", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionService) GetFunctionItems(ctx context.Context, in *GetFunctionItemsRequest, opts ...client.CallOption) (*GetFunctionItemsResponse, error) {
	req := c.c.NewRequest(c.name, "Function.GetFunctionItems", in)
	out := new(GetFunctionItemsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionService) GetFunctionItemDetail(ctx context.Context, in *GetFunctionItemRequest, opts ...client.CallOption) (*GetFunctionItemResponse, error) {
	req := c.c.NewRequest(c.name, "Function.GetFunctionItemDetail", in)
	out := new(GetFunctionItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Function service

type FunctionHandler interface {
	Add(context.Context, *FunctionRequest, *gs_commons_dto.Status) error
	Rename(context.Context, *FunctionRequest, *gs_commons_dto.Status) error
	Move(context.Context, *FunctionRequest, *gs_commons_dto.Status) error
	AddGroup(context.Context, *FunctionGroupRequest, *gs_commons_dto.Status) error
	MoveGroup(context.Context, *FunctionGroupRequest, *gs_commons_dto.Status) error
	RenameGroup(context.Context, *FunctionGroupRequest, *gs_commons_dto.Status) error
	GetFunctionItems(context.Context, *GetFunctionItemsRequest, *GetFunctionItemsResponse) error
	GetFunctionItemDetail(context.Context, *GetFunctionItemRequest, *GetFunctionItemResponse) error
}

func RegisterFunctionHandler(s server.Server, hdlr FunctionHandler, opts ...server.HandlerOption) error {
	type function interface {
		Add(ctx context.Context, in *FunctionRequest, out *gs_commons_dto.Status) error
		Rename(ctx context.Context, in *FunctionRequest, out *gs_commons_dto.Status) error
		Move(ctx context.Context, in *FunctionRequest, out *gs_commons_dto.Status) error
		AddGroup(ctx context.Context, in *FunctionGroupRequest, out *gs_commons_dto.Status) error
		MoveGroup(ctx context.Context, in *FunctionGroupRequest, out *gs_commons_dto.Status) error
		RenameGroup(ctx context.Context, in *FunctionGroupRequest, out *gs_commons_dto.Status) error
		GetFunctionItems(ctx context.Context, in *GetFunctionItemsRequest, out *GetFunctionItemsResponse) error
		GetFunctionItemDetail(ctx context.Context, in *GetFunctionItemRequest, out *GetFunctionItemResponse) error
	}
	type Function struct {
		function
	}
	h := &functionHandler{hdlr}
	return s.Handle(s.NewHandler(&Function{h}, opts...))
}

type functionHandler struct {
	FunctionHandler
}

func (h *functionHandler) Add(ctx context.Context, in *FunctionRequest, out *gs_commons_dto.Status) error {
	return h.FunctionHandler.Add(ctx, in, out)
}

func (h *functionHandler) Rename(ctx context.Context, in *FunctionRequest, out *gs_commons_dto.Status) error {
	return h.FunctionHandler.Rename(ctx, in, out)
}

func (h *functionHandler) Move(ctx context.Context, in *FunctionRequest, out *gs_commons_dto.Status) error {
	return h.FunctionHandler.Move(ctx, in, out)
}

func (h *functionHandler) AddGroup(ctx context.Context, in *FunctionGroupRequest, out *gs_commons_dto.Status) error {
	return h.FunctionHandler.AddGroup(ctx, in, out)
}

func (h *functionHandler) MoveGroup(ctx context.Context, in *FunctionGroupRequest, out *gs_commons_dto.Status) error {
	return h.FunctionHandler.MoveGroup(ctx, in, out)
}

func (h *functionHandler) RenameGroup(ctx context.Context, in *FunctionGroupRequest, out *gs_commons_dto.Status) error {
	return h.FunctionHandler.RenameGroup(ctx, in, out)
}

func (h *functionHandler) GetFunctionItems(ctx context.Context, in *GetFunctionItemsRequest, out *GetFunctionItemsResponse) error {
	return h.FunctionHandler.GetFunctionItems(ctx, in, out)
}

func (h *functionHandler) GetFunctionItemDetail(ctx context.Context, in *GetFunctionItemRequest, out *GetFunctionItemResponse) error {
	return h.FunctionHandler.GetFunctionItemDetail(ctx, in, out)
}
