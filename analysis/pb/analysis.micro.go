// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: analysis/pb/analysis.proto

/*
Package xbasissvc_external_analysis is a generated protocol buffer package.

It is generated from these files:
	analysis/pb/analysis.proto

It has these top-level messages:
	GetFunctionDetailRequest
	GetFunctionDetailResponse
	SearchTrackingRequest
	SearchTrackingResponse
	RequestTracking
	GetTrackingDetailRequest
	TrackingStageResponse
	TrackingStageItem
	StageTaking
*/
package xbasissvc_external_analysis

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "konekko.me/xbasis/commons/dto"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Analysis service

type AnalysisService interface {
	SearchTracking(ctx context.Context, in *SearchTrackingRequest, opts ...client.CallOption) (*SearchTrackingResponse, error)
	GetTrackingStageDetail(ctx context.Context, in *GetTrackingDetailRequest, opts ...client.CallOption) (*TrackingStageResponse, error)
	GetFunctionDetail(ctx context.Context, in *GetFunctionDetailRequest, opts ...client.CallOption) (*GetFunctionDetailResponse, error)
}

type analysisService struct {
	c    client.Client
	name string
}

func NewAnalysisService(name string, c client.Client) AnalysisService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "xbasissvc.external.analysis"
	}
	return &analysisService{
		c:    c,
		name: name,
	}
}

func (c *analysisService) SearchTracking(ctx context.Context, in *SearchTrackingRequest, opts ...client.CallOption) (*SearchTrackingResponse, error) {
	req := c.c.NewRequest(c.name, "Analysis.SearchTracking", in)
	out := new(SearchTrackingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisService) GetTrackingStageDetail(ctx context.Context, in *GetTrackingDetailRequest, opts ...client.CallOption) (*TrackingStageResponse, error) {
	req := c.c.NewRequest(c.name, "Analysis.GetTrackingStageDetail", in)
	out := new(TrackingStageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisService) GetFunctionDetail(ctx context.Context, in *GetFunctionDetailRequest, opts ...client.CallOption) (*GetFunctionDetailResponse, error) {
	req := c.c.NewRequest(c.name, "Analysis.GetFunctionDetail", in)
	out := new(GetFunctionDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Analysis service

type AnalysisHandler interface {
	SearchTracking(context.Context, *SearchTrackingRequest, *SearchTrackingResponse) error
	GetTrackingStageDetail(context.Context, *GetTrackingDetailRequest, *TrackingStageResponse) error
	GetFunctionDetail(context.Context, *GetFunctionDetailRequest, *GetFunctionDetailResponse) error
}

func RegisterAnalysisHandler(s server.Server, hdlr AnalysisHandler, opts ...server.HandlerOption) error {
	type analysis interface {
		SearchTracking(ctx context.Context, in *SearchTrackingRequest, out *SearchTrackingResponse) error
		GetTrackingStageDetail(ctx context.Context, in *GetTrackingDetailRequest, out *TrackingStageResponse) error
		GetFunctionDetail(ctx context.Context, in *GetFunctionDetailRequest, out *GetFunctionDetailResponse) error
	}
	type Analysis struct {
		analysis
	}
	h := &analysisHandler{hdlr}
	return s.Handle(s.NewHandler(&Analysis{h}, opts...))
}

type analysisHandler struct {
	AnalysisHandler
}

func (h *analysisHandler) SearchTracking(ctx context.Context, in *SearchTrackingRequest, out *SearchTrackingResponse) error {
	return h.AnalysisHandler.SearchTracking(ctx, in, out)
}

func (h *analysisHandler) GetTrackingStageDetail(ctx context.Context, in *GetTrackingDetailRequest, out *TrackingStageResponse) error {
	return h.AnalysisHandler.GetTrackingStageDetail(ctx, in, out)
}

func (h *analysisHandler) GetFunctionDetail(ctx context.Context, in *GetFunctionDetailRequest, out *GetFunctionDetailResponse) error {
	return h.AnalysisHandler.GetFunctionDetail(ctx, in, out)
}
