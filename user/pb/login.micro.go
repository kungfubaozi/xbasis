// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user/pb/login.proto

/*
Package xbasissvc_external_user is a generated protocol buffer package.

It is generated from these files:
	user/pb/login.proto

It has these top-level messages:
	EntryRequest
	EntryWithAccountResponse
	EntryWithQRCodeRequest
	EntryWithQRCodeResponse
*/
package xbasissvc_external_user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "konekko.me/xbasis/commons/dto"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Login service

type LoginService interface {
	// phone, email, account
	WithAccount(ctx context.Context, in *EntryRequest, opts ...client.CallOption) (*EntryWithAccountResponse, error)
	// use phone confirm
	WithQRCode(ctx context.Context, in *EntryRequest, opts ...client.CallOption) (*EntryWithQRCodeResponse, error)
	// phone or email
	WithValidateCode(ctx context.Context, in *EntryRequest, opts ...client.CallOption) (*EntryWithQRCodeResponse, error)
}

type loginService struct {
	c    client.Client
	name string
}

func NewLoginService(name string, c client.Client) LoginService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "xbasissvc.external.user"
	}
	return &loginService{
		c:    c,
		name: name,
	}
}

func (c *loginService) WithAccount(ctx context.Context, in *EntryRequest, opts ...client.CallOption) (*EntryWithAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Login.WithAccount", in)
	out := new(EntryWithAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) WithQRCode(ctx context.Context, in *EntryRequest, opts ...client.CallOption) (*EntryWithQRCodeResponse, error) {
	req := c.c.NewRequest(c.name, "Login.WithQRCode", in)
	out := new(EntryWithQRCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) WithValidateCode(ctx context.Context, in *EntryRequest, opts ...client.CallOption) (*EntryWithQRCodeResponse, error) {
	req := c.c.NewRequest(c.name, "Login.WithValidateCode", in)
	out := new(EntryWithQRCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Login service

type LoginHandler interface {
	// phone, email, account
	WithAccount(context.Context, *EntryRequest, *EntryWithAccountResponse) error
	// use phone confirm
	WithQRCode(context.Context, *EntryRequest, *EntryWithQRCodeResponse) error
	// phone or email
	WithValidateCode(context.Context, *EntryRequest, *EntryWithQRCodeResponse) error
}

func RegisterLoginHandler(s server.Server, hdlr LoginHandler, opts ...server.HandlerOption) error {
	type login interface {
		WithAccount(ctx context.Context, in *EntryRequest, out *EntryWithAccountResponse) error
		WithQRCode(ctx context.Context, in *EntryRequest, out *EntryWithQRCodeResponse) error
		WithValidateCode(ctx context.Context, in *EntryRequest, out *EntryWithQRCodeResponse) error
	}
	type Login struct {
		login
	}
	h := &loginHandler{hdlr}
	return s.Handle(s.NewHandler(&Login{h}, opts...))
}

type loginHandler struct {
	LoginHandler
}

func (h *loginHandler) WithAccount(ctx context.Context, in *EntryRequest, out *EntryWithAccountResponse) error {
	return h.LoginHandler.WithAccount(ctx, in, out)
}

func (h *loginHandler) WithQRCode(ctx context.Context, in *EntryRequest, out *EntryWithQRCodeResponse) error {
	return h.LoginHandler.WithQRCode(ctx, in, out)
}

func (h *loginHandler) WithValidateCode(ctx context.Context, in *EntryRequest, out *EntryWithQRCodeResponse) error {
	return h.LoginHandler.WithValidateCode(ctx, in, out)
}
