// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user/pb/user.proto

/*
Package gosionsvc_external_user is a generated protocol buffer package.

It is generated from these files:
	user/pb/user.proto

It has these top-level messages:
	SimpleUserInfo
	UserIdResponse
	FindRequest
*/
package gosionsvc_external_user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "konekko.me/gosion/commons/dto"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for User service

type UserService interface {
	FindUserInfoById(ctx context.Context, in *FindRequest, opts ...client.CallOption) (*SimpleUserInfo, error)
	FindUserIdByPhone(ctx context.Context, in *FindRequest, opts ...client.CallOption) (*UserIdResponse, error)
	FindUserIdByEmail(ctx context.Context, in *FindRequest, opts ...client.CallOption) (*UserIdResponse, error)
	FindUserIdByAccount(ctx context.Context, in *FindRequest, opts ...client.CallOption) (*UserIdResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "gosionsvc.external.user"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) FindUserInfoById(ctx context.Context, in *FindRequest, opts ...client.CallOption) (*SimpleUserInfo, error) {
	req := c.c.NewRequest(c.name, "User.FindUserInfoById", in)
	out := new(SimpleUserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindUserIdByPhone(ctx context.Context, in *FindRequest, opts ...client.CallOption) (*UserIdResponse, error) {
	req := c.c.NewRequest(c.name, "User.FindUserIdByPhone", in)
	out := new(UserIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindUserIdByEmail(ctx context.Context, in *FindRequest, opts ...client.CallOption) (*UserIdResponse, error) {
	req := c.c.NewRequest(c.name, "User.FindUserIdByEmail", in)
	out := new(UserIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindUserIdByAccount(ctx context.Context, in *FindRequest, opts ...client.CallOption) (*UserIdResponse, error) {
	req := c.c.NewRequest(c.name, "User.FindUserIdByAccount", in)
	out := new(UserIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	FindUserInfoById(context.Context, *FindRequest, *SimpleUserInfo) error
	FindUserIdByPhone(context.Context, *FindRequest, *UserIdResponse) error
	FindUserIdByEmail(context.Context, *FindRequest, *UserIdResponse) error
	FindUserIdByAccount(context.Context, *FindRequest, *UserIdResponse) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		FindUserInfoById(ctx context.Context, in *FindRequest, out *SimpleUserInfo) error
		FindUserIdByPhone(ctx context.Context, in *FindRequest, out *UserIdResponse) error
		FindUserIdByEmail(ctx context.Context, in *FindRequest, out *UserIdResponse) error
		FindUserIdByAccount(ctx context.Context, in *FindRequest, out *UserIdResponse) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) FindUserInfoById(ctx context.Context, in *FindRequest, out *SimpleUserInfo) error {
	return h.UserHandler.FindUserInfoById(ctx, in, out)
}

func (h *userHandler) FindUserIdByPhone(ctx context.Context, in *FindRequest, out *UserIdResponse) error {
	return h.UserHandler.FindUserIdByPhone(ctx, in, out)
}

func (h *userHandler) FindUserIdByEmail(ctx context.Context, in *FindRequest, out *UserIdResponse) error {
	return h.UserHandler.FindUserIdByEmail(ctx, in, out)
}

func (h *userHandler) FindUserIdByAccount(ctx context.Context, in *FindRequest, out *UserIdResponse) error {
	return h.UserHandler.FindUserIdByAccount(ctx, in, out)
}
