// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user/pb/update.proto

/*
Package gs_service_user is a generated protocol buffer package.

It is generated from these files:
	user/pb/update.proto

It has these top-level messages:
	UpdateRequest
	UpdatePasswordRequest
*/
package gs_service_user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import gs_commons_dto "konekko.me/gosion/commons/dto"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = gs_commons_dto.Status{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Update service

type UpdateService interface {
	Username(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	RealName(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	Phone(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	Email(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	UserIcon(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error)
	Password(ctx context.Context, in *UpdatePasswordRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error)
}

type updateService struct {
	c    client.Client
	name string
}

func NewUpdateService(name string, c client.Client) UpdateService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "gs.service.user"
	}
	return &updateService{
		c:    c,
		name: name,
	}
}

func (c *updateService) Username(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Update.Username", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateService) RealName(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Update.RealName", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateService) Phone(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Update.Phone", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateService) Email(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Update.Email", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateService) UserIcon(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Update.UserIcon", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateService) Password(ctx context.Context, in *UpdatePasswordRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Update.Password", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Update service

type UpdateHandler interface {
	Username(context.Context, *UpdateRequest, *gs_commons_dto.Status) error
	RealName(context.Context, *UpdateRequest, *gs_commons_dto.Status) error
	Phone(context.Context, *UpdateRequest, *gs_commons_dto.Status) error
	Email(context.Context, *UpdateRequest, *gs_commons_dto.Status) error
	UserIcon(context.Context, *UpdateRequest, *gs_commons_dto.Status) error
	Password(context.Context, *UpdatePasswordRequest, *gs_commons_dto.Status) error
}

func RegisterUpdateHandler(s server.Server, hdlr UpdateHandler, opts ...server.HandlerOption) error {
	type update interface {
		Username(ctx context.Context, in *UpdateRequest, out *gs_commons_dto.Status) error
		RealName(ctx context.Context, in *UpdateRequest, out *gs_commons_dto.Status) error
		Phone(ctx context.Context, in *UpdateRequest, out *gs_commons_dto.Status) error
		Email(ctx context.Context, in *UpdateRequest, out *gs_commons_dto.Status) error
		UserIcon(ctx context.Context, in *UpdateRequest, out *gs_commons_dto.Status) error
		Password(ctx context.Context, in *UpdatePasswordRequest, out *gs_commons_dto.Status) error
	}
	type Update struct {
		update
	}
	h := &updateHandler{hdlr}
	return s.Handle(s.NewHandler(&Update{h}, opts...))
}

type updateHandler struct {
	UpdateHandler
}

func (h *updateHandler) Username(ctx context.Context, in *UpdateRequest, out *gs_commons_dto.Status) error {
	return h.UpdateHandler.Username(ctx, in, out)
}

func (h *updateHandler) RealName(ctx context.Context, in *UpdateRequest, out *gs_commons_dto.Status) error {
	return h.UpdateHandler.RealName(ctx, in, out)
}

func (h *updateHandler) Phone(ctx context.Context, in *UpdateRequest, out *gs_commons_dto.Status) error {
	return h.UpdateHandler.Phone(ctx, in, out)
}

func (h *updateHandler) Email(ctx context.Context, in *UpdateRequest, out *gs_commons_dto.Status) error {
	return h.UpdateHandler.Email(ctx, in, out)
}

func (h *updateHandler) UserIcon(ctx context.Context, in *UpdateRequest, out *gs_commons_dto.Status) error {
	return h.UpdateHandler.UserIcon(ctx, in, out)
}

func (h *updateHandler) Password(ctx context.Context, in *UpdatePasswordRequest, out *gs_commons_dto.Status) error {
	return h.UpdateHandler.Password(ctx, in, out)
}
