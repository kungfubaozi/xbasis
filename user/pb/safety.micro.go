// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user/pb/safety.proto

/*
Package gosionsvc_external_user is a generated protocol buffer package.

It is generated from these files:
	user/pb/safety.proto

It has these top-level messages:
	ForgetPasswordRequest
*/
package gosionsvc_external_user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import gs_commons_dto "konekko.me/gosion/commons/dto"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = gs_commons_dto.Status{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Safety service

type SafetyService interface {
	ForgetPassword(ctx context.Context, in *ForgetPasswordRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error)
}

type safetyService struct {
	c    client.Client
	name string
}

func NewSafetyService(name string, c client.Client) SafetyService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "gosionsvc.external.user"
	}
	return &safetyService{
		c:    c,
		name: name,
	}
}

func (c *safetyService) ForgetPassword(ctx context.Context, in *ForgetPasswordRequest, opts ...client.CallOption) (*gs_commons_dto.Status, error) {
	req := c.c.NewRequest(c.name, "Safety.ForgetPassword", in)
	out := new(gs_commons_dto.Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Safety service

type SafetyHandler interface {
	ForgetPassword(context.Context, *ForgetPasswordRequest, *gs_commons_dto.Status) error
}

func RegisterSafetyHandler(s server.Server, hdlr SafetyHandler, opts ...server.HandlerOption) error {
	type safety interface {
		ForgetPassword(ctx context.Context, in *ForgetPasswordRequest, out *gs_commons_dto.Status) error
	}
	type Safety struct {
		safety
	}
	h := &safetyHandler{hdlr}
	return s.Handle(s.NewHandler(&Safety{h}, opts...))
}

type safetyHandler struct {
	SafetyHandler
}

func (h *safetyHandler) ForgetPassword(ctx context.Context, in *ForgetPasswordRequest, out *gs_commons_dto.Status) error {
	return h.SafetyHandler.ForgetPassword(ctx, in, out)
}
