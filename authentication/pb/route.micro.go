// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: authentication/pb/route.proto

/*
Package gs_service_authentication is a generated protocol buffer package.

It is generated from these files:
	authentication/pb/route.proto

It has these top-level messages:
	PushRequest
	PushResponse
*/
package gs_service_authentication

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "konekko.me/gosion/commons/dto"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Router service

type RouterService interface {
	Push(ctx context.Context, in *PushRequest, opts ...client.CallOption) (*PushResponse, error)
}

type routerService struct {
	c    client.Client
	name string
}

func NewRouterService(name string, c client.Client) RouterService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "gs.service.authentication"
	}
	return &routerService{
		c:    c,
		name: name,
	}
}

func (c *routerService) Push(ctx context.Context, in *PushRequest, opts ...client.CallOption) (*PushResponse, error) {
	req := c.c.NewRequest(c.name, "Router.push", in)
	out := new(PushResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Router service

type RouterHandler interface {
	Push(context.Context, *PushRequest, *PushResponse) error
}

func RegisterRouterHandler(s server.Server, hdlr RouterHandler, opts ...server.HandlerOption) error {
	type router interface {
		Push(ctx context.Context, in *PushRequest, out *PushResponse) error
	}
	type Router struct {
		router
	}
	h := &routerHandler{hdlr}
	return s.Handle(s.NewHandler(&Router{h}, opts...))
}

type routerHandler struct {
	RouterHandler
}

func (h *routerHandler) Push(ctx context.Context, in *PushRequest, out *PushResponse) error {
	return h.RouterHandler.Push(ctx, in, out)
}
